"use client";

import React, { useState, useRef, useLayoutEffect } from 'react';
import { 
  Brain, 
  FileText, 
  Terminal as TerminalIcon, 
  Settings, 
  Search, 
  Moon, 
  Sun, 
  Bell, 
  User, 
  X, 
  Plus,
  FolderOpen,
  Code,
  MessageSquare,
  Maximize2,
  Minimize2,
  Split,
  Save,
  Play,
  GitBranch,
  Database,
  Activity,
  Package,
  ChevronRight,
  ChevronLeft,
  Folder,
  Files,
  Layers,
  Bug
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import CroweLogicChatInterface from '@/components/crowe-logic-chat-interface';
import IDEChatInterface from '@/components/ide-chat-interface';
import { CroweLogo } from '@/components/crowe-logo';
import { useTheme } from 'next-themes';

interface FileTab {
  id: string;
  name: string;
  type: 'python' | 'markdown' | 'json' | 'text' | 'yaml';
  content: string;
  isDirty: boolean;
  isActive: boolean;
}

interface TerminalLine {
  id: string;
  content: string;
  type: 'input' | 'output' | 'error';
  timestamp: Date;
}

interface SidebarPanel {
  id: string;
  name: string;
  icon: React.ReactNode;
  content: React.ReactNode;
}

export default function EnhancedCroweLogicIDE() {
  const [openFiles, setOpenFiles] = useState<FileTab[]>([
    {
      id: '1',
      name: 'cultivation_log.py',
      type: 'python',
      content: `# Mycology Cultivation Log System
# Crowe Logic™ Professional Lab Management

import datetime
from typing import Dict, List, Optional

class CultivationBatch:
    """Professional mushroom cultivation batch tracking"""
    
    def __init__(self, batch_id: str, species: str, substrate: str):
        self.batch_id = batch_id
        self.species = species
        self.substrate = substrate
        self.start_date = datetime.datetime.now()
        self.log_entries: List[Dict] = []
        
    def add_log_entry(self, observation: str, temperature: float, humidity: float):
        """Add a cultivation observation log entry"""
        entry = {
            'timestamp': datetime.datetime.now(),
            'observation': observation,
            'temperature': temperature,
            'humidity': humidity
        }
        self.log_entries.append(entry)
        print(f"[{self.batch_id}] Logged: {observation}")
        
    def get_growth_metrics(self) -> Dict:
        """Calculate growth progress metrics"""
        days_elapsed = (datetime.datetime.now() - self.start_date).days
        return {
            'days_elapsed': days_elapsed,
            'total_observations': len(self.log_entries),
            'average_temp': sum(e['temperature'] for e in self.log_entries) / len(self.log_entries) if self.log_entries else 0,
            'average_humidity': sum(e['humidity'] for e in self.log_entries) / len(self.log_entries) if self.log_entries else 0
        }

# Example usage:
batch_001 = CultivationBatch("LM-001", "Pleurotus ostreatus", "Straw pellets")
batch_001.add_log_entry("Mycelium colonization beginning", 22.5, 85.0)
`,
      isDirty: false,
      isActive: true
    },
    {
      id: '2',
      name: 'sop_protocol.md',
      type: 'markdown',
      content: `# Standard Operating Procedure: Oyster Mushroom Cultivation

## Crowe Logic™ Professional Protocols

### Phase 1: Substrate Preparation
1. **Sterilization**: Steam sterilize substrate at 121°C for 90 minutes
2. **Cooling**: Allow substrate to cool to room temperature (18-22°C)
3. **pH Testing**: Ensure pH between 6.0-7.0 for optimal growth

### Phase 2: Inoculation
- Work in sterile laminar flow hood
- Use sterile techniques throughout process
- Inoculate with 3-5% spawn by weight
- Mix thoroughly but gently

### Phase 3: Incubation
- **Temperature**: 20-24°C
- **Humidity**: 80-90% RH
- **Duration**: 10-14 days for full colonization
- **Air Exchange**: Minimal during colonization

### Phase 4: Fruiting Initiation
- **Temperature Drop**: Reduce to 15-18°C
- **Humidity**: Increase to 90-95% RH
- **Light**: Provide 1000-1500 lux for 12 hours daily
- **Fresh Air**: Increase air exchanges to 4-6 per hour

### Quality Control Checkpoints
- [ ] Daily temperature/humidity monitoring
- [ ] Visual contamination inspection
- [ ] Growth progression documentation
- [ ] Harvest timing optimization

---
*Generated by Crowe Logic™ Cultivation Assistant*
`,
      isDirty: false,
      isActive: false
    }
  ]);
  const [activeFileId, setActiveFileId] = useState<string | null>('1');
  const [selectedCode, setSelectedCode] = useState<string>('');
  const [terminalLines, setTerminalLines] = useState<TerminalLine[]>([
    {
      id: 'welcome_1',
      content: 'Crowe Logic™ Cultivation Terminal v2.1.0',
      type: 'output',
      timestamp: new Date()
    },
    {
      id: 'welcome_2',
      content: 'Professional Mycology Lab Management System',
      type: 'output',
      timestamp: new Date()
    },
    {
      id: 'welcome_3',
      content: 'Type "help" for available cultivation commands.',
      type: 'output',
      timestamp: new Date()
    }
  ]);
  const [terminalInput, setTerminalInput] = useState('');
  const [isChatVisible, setIsChatVisible] = useState(false);
  const [isChatMinimized, setIsChatMinimized] = useState(false);
  const [isTerminalExpanded, setIsTerminalExpanded] = useState(false);
  const [splitView, setSplitView] = useState(false);
  const [leftSidebarExpanded, setLeftSidebarExpanded] = useState(true);
  const [rightSidebarExpanded, setRightSidebarExpanded] = useState(true);
  const [activeLeftPanel, setActiveLeftPanel] = useState('explorer');
  const [activeRightPanel, setActiveRightPanel] = useState('ai-assistant');
  const terminalScrollRef = useRef<HTMLDivElement>(null);
  const { theme, setTheme } = useTheme();

  const getFileTypeConfig = (type: string) => {
    const configs = {
      python: { icon: <Code className="w-3 h-3" />, color: 'text-blue-600', bgColor: 'bg-blue-100' },
      markdown: { icon: <FileText className="w-3 h-3" />, color: 'text-green-600', bgColor: 'bg-green-100' },
      json: { icon: <Layers className="w-3 h-3" />, color: 'text-yellow-600', bgColor: 'bg-yellow-100' },
      text: { icon: <FileText className="w-3 h-3" />, color: 'text-gray-600', bgColor: 'bg-gray-100' },
      yaml: { icon: <FileText className="w-3 h-3" />, color: 'text-purple-600', bgColor: 'bg-purple-100' },
    };
    return configs[type as keyof typeof configs] || configs.text;
  };

  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
  };

  const leftPanels: SidebarPanel[] = [
    {
      id: 'explorer',
      name: 'Explorer',
      icon: <Folder className="w-4 h-4" />,
      content: (
        <div className="space-y-1">
          <div className="flex items-center gap-2 text-sm font-medium mb-2">
            <FolderOpen className="w-4 h-4" />
            Open Files
          </div>
          {openFiles.map(file => {
            const config = getFileTypeConfig(file.type);
            return (
              <div
                key={file.id}
                className={`flex items-center gap-2 p-2 rounded text-sm cursor-pointer hover:bg-muted/50 ${
                  file.id === activeFileId ? 'bg-muted' : ''
                }`}
                onClick={() => setActiveFileId(file.id)}
              >
                <div className={`p-1 rounded ${config.bgColor}`}>
                  {config.icon}
                </div>
                <span className="flex-1 truncate">{file.name}</span>
                {file.isDirty && <div className="w-2 h-2 rounded-full bg-orange-500" />}
              </div>
            );
          })}
        </div>
      )
    },
    {
      id: 'search',
      name: 'Search',
      icon: <Search className="w-4 h-4" />,
      content: (
        <div className="space-y-3">
          <Input placeholder="Search files..." className="text-sm" />
          <div className="text-sm text-muted-foreground">
            No results found
          </div>
        </div>
      )
    },
    {
      id: 'git',
      name: 'Source Control',
      icon: <GitBranch className="w-4 h-4" />,
      content: (
        <div className="space-y-3">
          <div className="text-sm font-medium">Source Control</div>
          <div className="text-sm text-muted-foreground">
            No changes detected
          </div>
        </div>
      )
    },
    {
      id: 'extensions',
      name: 'Extensions',
      icon: <Package className="w-4 h-4" />,
      content: (
        <div className="space-y-3">
          <div className="text-sm font-medium">Extensions</div>
          <div className="text-sm text-muted-foreground">
            Manage your extensions
          </div>
        </div>
      )
    }
  ];

  const rightPanels: SidebarPanel[] = [
    {
      id: 'ai-assistant',
      name: 'AI Assistant',
      icon: <Brain className="w-4 h-4" />,
      content: (
        <div className="h-[600px]">
          <IDEChatInterface 
            currentFile={
              activeFileId 
                ? {
                    name: openFiles.find(f => f.id === activeFileId)?.name || '',
                    content: openFiles.find(f => f.id === activeFileId)?.content || '',
                    language: openFiles.find(f => f.id === activeFileId)?.type || 'text'
                  }
                : undefined
            }
            selectedCode={selectedCode}
            onCodeGenerated={(code) => {
              // Handle generated code - could insert into current file
              if (activeFileId) {
                const activeFile = openFiles.find(f => f.id === activeFileId);
                if (activeFile) {
                  // Insert code at the end of current file or replace selection
                  const newContent = selectedCode 
                    ? activeFile.content.replace(selectedCode, code)
                    : activeFile.content + '\n\n' + code;
                  updateFileContent(activeFileId, newContent);
                }
              }
            }}
          />
        </div>
      )
    },
    {
      id: 'tools',
      name: 'Tools & Analysis',
      icon: <Activity className="w-4 h-4" />,
      content: (
        <div className="space-y-3">
          <Card className="p-3">
            <h4 className="font-medium text-sm mb-2">Environment Status</h4>
            <div className="space-y-2 text-xs">
              <div className="flex justify-between">
                <span>CO₂ Level:</span>
                <Badge variant="secondary">Normal</Badge>
              </div>
              <div className="flex justify-between">
                <span>Temperature:</span>
                <span>22.3°C</span>
              </div>
              <div className="flex justify-between">
                <span>Humidity:</span>
                <span>85%</span>
              </div>
            </div>
          </Card>
          <Card className="p-3">
            <h4 className="font-medium text-sm mb-2">Active Batches</h4>
            <div className="space-y-1 text-xs">
              <div>Lions Mane #001 - Day 12/16</div>
              <div>Oyster #012 - Day 8/14</div>
            </div>
          </Card>
        </div>
      )
    },
    {
      id: 'database',
      name: 'Database',
      icon: <Database className="w-4 h-4" />,
      content: (
        <div className="space-y-3">
          <div className="text-sm font-medium">Database Explorer</div>
          <div className="text-sm text-muted-foreground">
            Connect to view database
          </div>
        </div>
      )
    },
    {
      id: 'debug',
      name: 'Debug Console',
      icon: <Bug className="w-4 h-4" />,
      content: (
        <div className="space-y-3">
          <div className="text-sm font-medium">Debug Console</div>
          <div className="text-sm text-muted-foreground">
            No debug session active
          </div>
        </div>
      )
    }
  ];

  const createNewFile = (type: 'python' | 'markdown' | 'json' | 'text' = 'python') => {
    const extensions = { python: '.py', markdown: '.md', json: '.json', text: '.txt' };
    const name = `untitled${openFiles.length + 1}${extensions[type]}`;
    
    const newFile: FileTab = {
      id: `file_${Date.now()}`,
      name,
      type,
      content: '',
      isDirty: false,
      isActive: true
    };

    setOpenFiles(prev => prev.map(f => ({ ...f, isActive: false })).concat(newFile));
    setActiveFileId(newFile.id);
  };

  const closeFile = (fileId: string) => {
    setOpenFiles(prev => {
      const filtered = prev.filter(f => f.id !== fileId);
      if (fileId === activeFileId && filtered.length > 0) {
        setActiveFileId(filtered[filtered.length - 1].id);
      } else if (filtered.length === 0) {
        setActiveFileId(null);
      }
      return filtered;
    });
  };

  const updateFileContent = (fileId: string, content: string) => {
    setOpenFiles(prev => prev.map(f => 
      f.id === fileId ? { ...f, content, isDirty: true } : f
    ));
  };

  const executeTerminalCommand = () => {
    if (!terminalInput.trim()) return;

    const newInputLine: TerminalLine = {
      id: `input_${Date.now()}`,
      content: `$ ${terminalInput}`,
      type: 'input',
      timestamp: new Date()
    };

    let outputContent = '';
    let outputType: 'output' | 'error' = 'output';

    // Mycology-specific commands
    const command = terminalInput.trim().toLowerCase();
    
    if (command === 'help') {
      outputContent = `Crowe Logic™ Cultivation Commands:
  monitor-batch <id>     Monitor cultivation batch status
  create-batch <species> Create new cultivation batch
  check-env             Check environmental conditions
  generate-sop          Generate standard operating procedure
  contamination-check   Run contamination analysis
  harvest-ready <id>    Check if batch is ready for harvest
  sterilize-log         Log sterilization cycle
  help                  Show this help message`;
    } else if (command.startsWith('monitor-batch')) {
      const batchId = command.split(' ')[1] || 'LM-001';
      outputContent = `[${batchId}] Monitoring Status:
  Species: Pleurotus ostreatus (Oyster Mushroom)
  Day: 12/16 (Colonization Phase)
  Temperature: 22.3°C ✓
  Humidity: 87% ✓
  Contamination: None detected ✓
  Growth Rate: Normal progression`;
    } else if (command.startsWith('create-batch')) {
      const species = command.split(' ').slice(1).join(' ') || 'Pleurotus ostreatus';
      const batchId = `LM-${String(Math.floor(Math.random() * 1000)).padStart(3, '0')}`;
      outputContent = `Created new batch: ${batchId}
  Species: ${species}
  Substrate: Prepared and sterilized
  Inoculation: Ready for spawn introduction
  Expected harvest: 14-21 days`;
    } else if (command === 'check-env') {
      outputContent = `Environmental Status:
  Lab Temperature: 22.3°C ✓
  Lab Humidity: 65% ✓
  CO₂ Level: 450 ppm ✓
  Air Filtration: Active ✓
  Sterile Conditions: Maintained ✓`;
    } else if (command === 'generate-sop') {
      outputContent = `Generating SOP for current cultivation...
  ✓ Substrate preparation protocol
  ✓ Sterilization procedures
  ✓ Inoculation guidelines
  ✓ Environmental controls
  ✓ Harvest timing
  
  SOP saved to: sop_protocol.md`;
    } else if (command === 'contamination-check') {
      outputContent = `Running contamination analysis...
  ✓ Visual inspection: Clear
  ✓ Odor assessment: Normal mushroom scent
  ✓ Growth pattern: Uniform white mycelium
  ✓ Color analysis: No discoloration
  
  Result: No contamination detected`;
    } else if (command.startsWith('harvest-ready')) {
      const batchId = command.split(' ')[1] || 'LM-001';
      outputContent = `[${batchId}] Harvest Assessment:
  Cap size: 3-5cm (optimal range)
  Spore release: Minimal (good timing)
  Texture: Firm and fresh
  Color: Natural species color
  
  Recommendation: Ready for harvest within 24 hours`;
    } else if (command === 'sterilize-log') {
      outputContent = `Sterilization Cycle Logged:
  Timestamp: ${new Date().toLocaleString()}
  Method: Steam autoclave
  Temperature: 121°C
  Duration: 90 minutes
  Pressure: 15 PSI
  Status: Successful ✓`;
    } else if (command === 'ls' || command === 'dir') {
      outputContent = `cultivation_log.py
sop_protocol.md
batch_data.json
environmental_logs/
sterilization_records/
harvest_reports/`;
    } else if (command === 'pwd') {
      outputContent = `/lab/crowe-logic/cultivation-workspace`;
    } else if (command.startsWith('python')) {
      outputContent = `Python 3.11.0 (Crowe Logic Cultivation Environment)
Ready for mycology data analysis and automation...`;
    } else {
      outputContent = `Command '${terminalInput}' not recognized. Type 'help' for available commands.`;
      outputType = 'error';
    }

    const outputLine: TerminalLine = {
      id: `output_${Date.now()}`,
      content: outputContent,
      type: outputType,
      timestamp: new Date()
    };

    setTerminalLines(prev => [...prev, newInputLine, outputLine]);
    setTerminalInput('');
  };

  const activeFile = openFiles.find(f => f.id === activeFileId);
  const activeLeftPanelData = leftPanels.find(p => p.id === activeLeftPanel);
  const activeRightPanelData = rightPanels.find(p => p.id === activeRightPanel);

  return (
    <div className="h-screen flex flex-col bg-background">
      {/* Top Header */}
      <header className="h-12 bg-background border-b flex items-center justify-between px-4 sticky top-0 z-50">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <CroweLogo 
              variant="official-minimal"
              size={32}
              systemBranding={true}
              darkTheme={theme === 'dark'}
            />
            <h1 className="font-semibold text-lg text-foreground">
              Crowe Logic™ IDE
            </h1>
          </div>
          <div className="flex items-center gap-2">
            <Input
              placeholder="Search files and commands..."
              className="w-64 h-8 text-sm"
            />
            <Button variant="ghost" size="sm">
              <Search className="w-4 h-4" />
            </Button>
          </div>
        </div>

        <div className="flex items-center gap-2">
          <Button 
            variant={splitView ? "default" : "ghost"} 
            size="sm"
            onClick={() => setSplitView(!splitView)}
            title="Toggle AI Chat"
          >
            <MessageSquare className="w-4 h-4" />
          </Button>
          <Button variant="ghost" size="sm">
            <Bell className="w-4 h-4" />
          </Button>
          <Button 
            variant="ghost" 
            size="sm"
            onClick={toggleTheme}
          >
            {theme === 'dark' ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />}
          </Button>
          <Button variant="ghost" size="sm">
            <User className="w-4 h-4" />
          </Button>
        </div>
      </header>

      {/* Main Layout */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Sidebar Activity Bar */}
        <div className="w-12 bg-muted/30 border-r flex flex-col items-center py-2 gap-1">
          {leftPanels.map((panel) => (
            <Button
              key={panel.id}
              variant={activeLeftPanel === panel.id ? "default" : "ghost"}
              size="sm"
              className="w-10 h-10 p-0"
              onClick={() => {
                if (activeLeftPanel === panel.id) {
                  setLeftSidebarExpanded(!leftSidebarExpanded);
                } else {
                  setActiveLeftPanel(panel.id);
                  setLeftSidebarExpanded(true);
                }
              }}
              title={panel.name}
            >
              {panel.icon}
            </Button>
          ))}
        </div>

        {/* Left Sidebar Panel */}
        {leftSidebarExpanded && (
          <div className="w-80 bg-muted/30 border-r flex flex-col">
            <div className="p-3 border-b flex items-center justify-between">
              <h3 className="font-medium text-sm">{activeLeftPanelData?.name}</h3>
              <div className="flex gap-1">
                <Button variant="ghost" size="sm" onClick={() => createNewFile()}>
                  <Plus className="w-3 h-3" />
                </Button>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => setLeftSidebarExpanded(false)}
                >
                  <ChevronLeft className="w-3 h-3" />
                </Button>
              </div>
            </div>
            
            <ScrollArea className="flex-1 p-3 custom-scrollbar">
              {activeLeftPanelData?.content}
            </ScrollArea>
          </div>
        )}

        {/* Center Panel - Editor/Terminal */}
        <div className="flex-1 flex flex-col">
          {/* File Tabs */}
          {openFiles.length > 0 && (
            <div className="h-10 bg-muted/20 border-b">
              <ScrollArea className="w-full h-full whitespace-nowrap">
                <div className="flex items-center gap-0 h-full">
                  {openFiles.map(file => {
                    const config = getFileTypeConfig(file.type);
                    return (
                      <div
                        key={file.id}
                        className={`flex items-center gap-2 px-3 h-10 border-r cursor-pointer hover:bg-muted/50 min-w-fit ${
                          file.id === activeFileId ? 'bg-background border-b-2 border-primary' : ''
                        }`}
                        onClick={() => setActiveFileId(file.id)}
                      >
                        <div className={`${config.color}`}>
                          {config.icon}
                        </div>
                        <span className="text-sm whitespace-nowrap">{file.name}</span>
                        {file.isDirty && <div className="w-1.5 h-1.5 rounded-full bg-orange-500" />}
                        <Button
                          variant="ghost"
                          size="sm"
                          className="w-4 h-4 p-0 hover:bg-destructive/20"
                          onClick={(e) => {
                            e.stopPropagation();
                            closeFile(file.id);
                          }}
                        >
                          <X className="w-3 h-3" />
                        </Button>
                      </div>
                    );
                  })}
                </div>
                <ScrollBar orientation="horizontal" />
              </ScrollArea>
            </div>
          )}

          {/* Editor/Chat Area */}
          <div className="flex-1 flex overflow-hidden">
            {/* Main Editor */}
            <div className={`${splitView ? 'w-1/2' : 'flex-1'} flex flex-col border-r`}>
              {activeFile ? (
                <div className="flex-1 flex flex-col">
                  {/* Editor Toolbar */}
                  <div className="h-8 bg-muted/20 border-b flex items-center justify-between px-3">
                    <div className="flex items-center gap-2 text-sm">
                      <span>{activeFile.name}</span>
                      {activeFile.isDirty && <span className="text-orange-500">●</span>}
                    </div>
                    <div className="flex gap-1">
                      <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                        <Save className="w-3 h-3" />
                      </Button>
                      <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                        <Play className="w-3 h-3" />
                      </Button>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-6 w-6 p-0"
                        onClick={() => setSplitView(!splitView)}
                      >
                        <Split className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>

                  <div className="flex-1 flex">
                    {/* Left Editor Scrollbar */}
                    <div className="w-4 bg-muted/10 border-r">
                      <div className="w-full h-8 bg-muted/30 hover:bg-muted/50 cursor-ns-resize"></div>
                    </div>

                    {/* Editor Content */}
                    <div className="flex-1 flex flex-col">
                      {/* Top Scrollbar */}
                      <div className="h-4 bg-muted/10 border-b">
                        <div className="h-full w-20 bg-muted/30 hover:bg-muted/50 cursor-ew-resize"></div>
                      </div>

                      <ScrollArea className="flex-1 ide-scrollbar">
                        <Textarea
                          value={activeFile.content}
                          onChange={(e) => updateFileContent(activeFile.id, e.target.value)}
                          onSelect={(e) => {
                            const target = e.target as HTMLTextAreaElement;
                            const start = target.selectionStart;
                            const end = target.selectionEnd;
                            if (start !== end) {
                              setSelectedCode(target.value.substring(start, end));
                            } else {
                              setSelectedCode('');
                            }
                          }}
                          className="min-h-[400px] font-mono text-sm resize-none border-none focus:ring-0 bg-transparent"
                          placeholder={`Start coding in ${activeFile.name}...`}
                        />
                      </ScrollArea>

                      {/* Bottom Scrollbar */}
                      <div className="h-4 bg-muted/10 border-t">
                        <div className="h-full w-20 bg-muted/30 hover:bg-muted/50 cursor-ew-resize"></div>
                      </div>
                    </div>

                    {/* Right Editor Scrollbar */}
                    <div className="w-4 bg-muted/10 border-l">
                      <div className="w-full h-8 bg-muted/30 hover:bg-muted/50 cursor-ns-resize"></div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="flex-1 flex items-center justify-center text-muted-foreground">
                  <div className="text-center">
                    <Code className="w-12 h-12 mx-auto mb-4 opacity-50" />
                    <p>Open a file to start editing</p>
                    <Button className="mt-4" onClick={() => createNewFile()}>
                      <Plus className="w-4 h-4 mr-2" />
                      New File
                    </Button>
                  </div>
                </div>
              )}
            </div>

            {/* Split View - Chat */}
            {splitView && (
              <div className="w-1/2 bg-background">
                <IDEChatInterface 
                  currentFile={
                    activeFileId 
                      ? {
                          name: openFiles.find(f => f.id === activeFileId)?.name || '',
                          content: openFiles.find(f => f.id === activeFileId)?.content || '',
                          language: openFiles.find(f => f.id === activeFileId)?.type || 'text'
                        }
                      : undefined
                  }
                  selectedCode={selectedCode}
                  onCodeGenerated={(code) => {
                    // Handle generated code - could insert into current file
                    console.log('Generated code:', code);
                  }}
                />
              </div>
            )}
          </div>

          {/* Terminal */}
          <div className={`border-t bg-background ${isTerminalExpanded ? 'h-80' : 'h-40'} flex flex-col`}>
            <div className="h-8 bg-muted/20 border-b flex items-center justify-between px-3">
              <div className="flex items-center gap-2 text-sm">
                <TerminalIcon className="w-3 h-3" />
                <span>Terminal</span>
              </div>
              <Button 
                variant="ghost" 
                size="sm" 
                className="h-6 w-6 p-0"
                onClick={() => setIsTerminalExpanded(!isTerminalExpanded)}
              >
                {isTerminalExpanded ? <Minimize2 className="w-3 h-3" /> : <Maximize2 className="w-3 h-3" />}
              </Button>
            </div>
            
            <div className="flex flex-1">
              {/* Terminal Left Scrollbar */}
              <div className="w-4 bg-gray-800 border-r border-gray-700">
                <div className="w-full h-8 bg-gray-700 hover:bg-gray-600 cursor-ns-resize"></div>
              </div>

              <ScrollArea className="flex-1 p-2 font-mono text-sm bg-gray-900 text-green-400 ide-scrollbar">
                <div ref={terminalScrollRef} className="space-y-1">
                  {terminalLines.map(line => (
                    <div
                      key={line.id}
                      className={`${
                        line.type === 'input' ? 'text-white' :
                        line.type === 'error' ? 'text-red-400' : 'text-green-400'
                      }`}
                    >
                      {line.content}
                    </div>
                  ))}
                  <div className="flex items-center gap-2">
                    <span className="text-blue-400">$</span>
                    <Input
                      value={terminalInput}
                      onChange={(e) => setTerminalInput(e.target.value)}
                      onKeyDown={(e) => e.key === 'Enter' && executeTerminalCommand()}
                      className="flex-1 bg-transparent border-none text-white focus:ring-0 p-0 h-auto"
                      placeholder="Type command..."
                    />
                  </div>
                </div>
              </ScrollArea>

              {/* Terminal Right Scrollbar */}
              <div className="w-4 bg-gray-800 border-l border-gray-700">
                <div className="w-full h-8 bg-gray-700 hover:bg-gray-600 cursor-ns-resize"></div>
              </div>
            </div>
          </div>
        </div>

        {/* Right Sidebar Panel */}
        {rightSidebarExpanded && (
          <div className="w-80 bg-muted/30 border-l flex flex-col">
            <div className="p-3 border-b flex items-center justify-between">
              <h3 className="font-medium text-sm">{activeRightPanelData?.name}</h3>
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={() => setRightSidebarExpanded(false)}
              >
                <ChevronRight className="w-3 h-3" />
              </Button>
            </div>
            
            <ScrollArea className="flex-1 p-3 custom-scrollbar">
              {activeRightPanelData?.content}
            </ScrollArea>
          </div>
        )}

        {/* Right Sidebar Activity Bar */}
        <div className="w-12 bg-muted/30 border-l flex flex-col items-center py-2 gap-1">
          {rightPanels.map((panel) => (
            <Button
              key={panel.id}
              variant={activeRightPanel === panel.id ? "default" : "ghost"}
              size="sm"
              className="w-10 h-10 p-0"
              onClick={() => {
                if (activeRightPanel === panel.id) {
                  setRightSidebarExpanded(!rightSidebarExpanded);
                } else {
                  setActiveRightPanel(panel.id);
                  setRightSidebarExpanded(true);
                }
              }}
              title={panel.name}
            >
              {panel.icon}
            </Button>
          ))}
        </div>
      </div>

      {/* Chat Minimized Indicator */}
      {isChatMinimized && activeFile && (
        <div className="fixed bottom-4 right-4">
          <Button
            onClick={() => setIsChatMinimized(false)}
            className="rounded-full w-12 h-12 bg-primary hover:bg-primary/90"
          >
            <MessageSquare className="w-5 h-5" />
          </Button>
        </div>
      )}
    </div>
  );
}
