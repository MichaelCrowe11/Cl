"use client";

import React, { useState, useRef, useEffect } from 'react';
import { 
  Sun, 
  Moon,
  MessageSquare,
  Terminal as TerminalIcon,
  Maximize2,
  Minimize2,
  Split,
  Save,
  Play,
  RotateCcw,
  Search,
  Command,
  X,
  Plus,
  Code,
  FileText,
  GitBranch,
  CheckCircle,
  Activity,
  Brain,
  Cpu
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { useTheme } from 'next-themes';
import EnhancedLeftSidebar from './enhanced-left-sidebar';
import EnhancedRightSidebar from './enhanced-right-sidebar';
import '@/styles/ide-scrollbars.css';

interface FileTab {
  id: string;
  name: string;
  type: 'python' | 'markdown' | 'json' | 'text' | 'yaml';
  content: string;
  isDirty: boolean;
  isActive: boolean;
}

interface TerminalLine {
  id: string;
  content: string;
  type: 'input' | 'output' | 'error';
  timestamp: Date;
}

export default function CroweOSProIDE() {
  const { theme, setTheme } = useTheme();
  
  // Sidebar states
  const [leftSidebarExpanded, setLeftSidebarExpanded] = useState(true);
  const [rightSidebarExpanded, setRightSidebarExpanded] = useState(true);
  const [activeLeftPanel, setActiveLeftPanel] = useState('explorer');
  const [activeRightPanel, setActiveRightPanel] = useState('code-completion');
  
  // File management
  const [openFiles, setOpenFiles] = useState<FileTab[]>([
    {
      id: '1',
      name: 'cultivation_log.py',
      type: 'python',
      content: `# CroweOS Mycology Research Platform
# Crowe Logic™ Professional Lab Management

import datetime
from typing import Dict, List, Optional

class CultivationBatch:
    """Professional mushroom cultivation batch tracking"""
    
    def __init__(self, batch_id: str, species: str, substrate: str):
        self.batch_id = batch_id
        self.species = species
        self.substrate = substrate
        self.start_date = datetime.datetime.now()
        self.log_entries: List[Dict] = []
        
    def add_log_entry(self, observation: str, temperature: float, humidity: float):
        """Add a cultivation observation log entry"""
        entry = {
            'timestamp': datetime.datetime.now(),
            'observation': observation,
            'temperature': temperature,
            'humidity': humidity
        }
        self.log_entries.append(entry)
        print(f"[{self.batch_id}] Logged: {observation}")
        
    def get_growth_metrics(self) -> Dict:
        """Calculate growth progress metrics"""
        days_elapsed = (datetime.datetime.now() - self.start_date).days
        return {
            'days_elapsed': days_elapsed,
            'total_observations': len(self.log_entries),
            'average_temp': sum(e['temperature'] for e in self.log_entries) / len(self.log_entries) if self.log_entries else 0,
            'average_humidity': sum(e['humidity'] for e in self.log_entries) / len(self.log_entries) if self.log_entries else 0
        }

# Example usage:
batch_001 = CultivationBatch("LM-001", "Pleurotus ostreatus", "Straw pellets")
batch_001.add_log_entry("Mycelium colonization beginning", 22.5, 85.0)`,
      isDirty: false,
      isActive: true
    },
    {
      id: '2',
      name: 'sop_protocol.md',
      type: 'markdown',
      content: `# Standard Operating Procedure: Oyster Mushroom Cultivation

## Crowe Logic™ Professional Protocols

### Phase 1: Substrate Preparation
1. **Sterilization**: Steam sterilize substrate at 121°C for 90 minutes
2. **Cooling**: Allow substrate to cool to room temperature (18-22°C)
3. **pH Testing**: Ensure pH between 6.0-7.0 for optimal growth

### Phase 2: Inoculation
- Work in sterile laminar flow hood
- Use sterile techniques throughout process
- Inoculate with 3-5% spawn by weight
- Mix thoroughly but gently

### Phase 3: Incubation
- **Temperature**: 20-24°C
- **Humidity**: 80-90% RH
- **Duration**: 10-14 days for full colonization
- **Air Exchange**: Minimal during colonization

### Phase 4: Fruiting Initiation
- **Temperature Drop**: Reduce to 15-18°C
- **Humidity**: Increase to 90-95% RH
- **Light**: Provide 1000-1500 lux for 12 hours daily
- **Fresh Air**: Increase air exchanges to 4-6 per hour

### Quality Control Checkpoints
- [ ] Daily temperature/humidity monitoring
- [ ] Visual contamination inspection
- [ ] Growth progression documentation
- [ ] Harvest timing optimization

---
*Generated by Crowe Logic™ Cultivation Assistant*`,
      isDirty: false,
      isActive: false
    }
  ]);
  
  const [activeFileId, setActiveFileId] = useState<string | null>('1');
  const [selectedCode, setSelectedCode] = useState<string>('');
  
  // Terminal state
  const [isTerminalExpanded, setIsTerminalExpanded] = useState(false);
  const [terminalLines, setTerminalLines] = useState<TerminalLine[]>([
    {
      id: 'welcome_1',
      content: 'CroweOS™ Cultivation Terminal v2.1.0',
      type: 'output',
      timestamp: new Date()
    },
    {
      id: 'welcome_2',
      content: 'Professional Mycology Lab Management System',
      type: 'output',
      timestamp: new Date()
    },
    {
      id: 'welcome_3',
      content: 'Type "help" for available cultivation commands.',
      type: 'output',
      timestamp: new Date()
    }
  ]);
  const [terminalInput, setTerminalInput] = useState('');
  
  // Command palette
  const [showCommandPalette, setShowCommandPalette] = useState(false);
  const [commandSearch, setCommandSearch] = useState('');
  
  const terminalScrollRef = useRef<HTMLDivElement>(null);

  // Status bar data
  const statusBarData = {
    language: openFiles.find(f => f.id === activeFileId)?.type || 'text',
    encoding: 'UTF-8',
    lineEnding: 'LF',
    cursorPosition: '1:1',
    selection: selectedCode ? `${selectedCode.split('\\n').length} lines selected` : '',
    gitBranch: 'main',
    aiStatus: 'Ready',
    environmentStatus: 'Connected'
  };

  const commands = [
    { id: 'new-file', label: 'File: New File', shortcut: 'Ctrl+N', action: () => createNewFile() },
    { id: 'save-file', label: 'File: Save', shortcut: 'Ctrl+S', action: () => console.log('Save') },
    { id: 'toggle-sidebar', label: 'View: Toggle Sidebar', shortcut: 'Ctrl+B', action: () => setLeftSidebarExpanded(!leftSidebarExpanded) },
    { id: 'toggle-terminal', label: 'View: Toggle Terminal', shortcut: 'Ctrl+\`', action: () => setIsTerminalExpanded(!isTerminalExpanded) },
    { id: 'ai-chat', label: 'AI: Open Assistant', shortcut: 'Ctrl+K', action: () => { setActiveRightPanel('ai-assistant'); setRightSidebarExpanded(true); } },
  ];

  const filteredCommands = commands.filter(cmd =>
    cmd.label.toLowerCase().includes(commandSearch.toLowerCase())
  );

  const createNewFile = (type: 'python' | 'markdown' | 'json' | 'text' = 'python') => {
    const extensions = { python: '.py', markdown: '.md', json: '.json', text: '.txt' };
    const name = `untitled${openFiles.length + 1}${extensions[type]}`;
    
    const newFile: FileTab = {
      id: `file_${Date.now()}`,
      name,
      type,
      content: '',
      isDirty: false,
      isActive: true
    };

    setOpenFiles(prev => prev.map(f => ({ ...f, isActive: false })).concat(newFile));
    setActiveFileId(newFile.id);
  };

  const closeFile = (fileId: string) => {
    setOpenFiles(prev => {
      const filtered = prev.filter(f => f.id !== fileId);
      if (fileId === activeFileId && filtered.length > 0) {
        setActiveFileId(filtered[filtered.length - 1].id);
      } else if (filtered.length === 0) {
        setActiveFileId(null);
      }
      return filtered;
    });
  };

  const updateFileContent = (fileId: string, content: string) => {
    setOpenFiles(prev => prev.map(f => 
      f.id === fileId ? { ...f, content, isDirty: true } : f
    ));
  };

  const executeTerminalCommand = async () => {
    if (!terminalInput.trim()) return;

    const newInputLine: TerminalLine = {
      id: `input_${Date.now()}`,
      content: `$ ${terminalInput}`,
      type: 'input',
      timestamp: new Date()
    };

    setTerminalLines(prev => [...prev, newInputLine]);
    
    // Simulate command execution
    setTimeout(() => {
      const outputLine: TerminalLine = {
        id: `output_${Date.now()}`,
        content: `Command '${terminalInput}' executed successfully`,
        type: 'output',
        timestamp: new Date()
      };
      setTerminalLines(prev => [...prev, outputLine]);
    }, 500);

    setTerminalInput('');
  };

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if ((e.metaKey || e.ctrlKey) && e.shiftKey && e.key === 'P') {
        e.preventDefault();
        setShowCommandPalette(true);
      }
      
      if ((e.metaKey || e.ctrlKey) && e.key === 'b') {
        e.preventDefault();
        setLeftSidebarExpanded(!leftSidebarExpanded);
      }
      
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        setActiveRightPanel('ai-assistant');
        setRightSidebarExpanded(true);
      }
      
      if (e.key === 'Escape') {
        setShowCommandPalette(false);
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [leftSidebarExpanded, rightSidebarExpanded]);

  const activeFile = openFiles.find(f => f.id === activeFileId);

  return (
    <div className="h-screen flex flex-col bg-background">
      {/* Header */}
      <header className="h-12 bg-background border-b flex items-center justify-between px-4 sticky top-0 z-50">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-3">
            <img 
              src="/crowe-avatar.png" 
              alt="Crowe Logic AI" 
              className="w-8 h-8 rounded-full"
            />
            <h1 className="font-semibold text-lg text-foreground">
              CroweOS Pro IDE
            </h1>
            <Badge variant="secondary" className="text-xs">
              v2.1.0
            </Badge>
          </div>
          <div className="flex items-center gap-2">
            <Input
              placeholder="Search files and commands..."
              className="w-64 h-8 text-sm"
              onClick={() => setShowCommandPalette(true)}
            />
            <Button variant="ghost" size="sm">
              <Search className="w-4 h-4" />
            </Button>
          </div>
        </div>

        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
          >
            {theme === 'dark' ? <Sun className="w-4 h-4" /> : <Moon className="w-4 h-4" />}
          </Button>
        </div>
      </header>

      {/* Main Content */}
      <div className="flex-1 flex overflow-hidden">
        {/* Left Sidebar */}
        <EnhancedLeftSidebar
          activePanel={activeLeftPanel}
          setActivePanel={setActiveLeftPanel}
          isExpanded={leftSidebarExpanded}
          setIsExpanded={setLeftSidebarExpanded}
          openFiles={openFiles}
          activeFileId={activeFileId}
          onFileSelect={setActiveFileId}
          onFileCreate={(type) => createNewFile(type as 'python' | 'markdown' | 'json' | 'text')}
        />

        {/* Editor Area */}
        <div className="flex-1 flex flex-col">
          {/* File Tabs */}
          <div className="h-10 bg-muted/30 border-b flex items-center">
            <div className="flex items-center">
              {openFiles.map(file => (
                <div
                  key={file.id}
                  className={`flex items-center gap-2 px-3 py-2 border-r cursor-pointer hover:bg-muted/50 ${
                    file.id === activeFileId ? 'bg-background border-b-2 border-blue-500' : ''
                  }`}
                  onClick={() => setActiveFileId(file.id)}
                >
                  <FileText className="w-3 h-3" />
                  <span className="text-sm">{file.name}</span>
                  {file.isDirty && <div className="w-2 h-2 rounded-full bg-orange-500" />}
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-4 w-4 p-0 ml-1"
                    onClick={(e) => {
                      e.stopPropagation();
                      closeFile(file.id);
                    }}
                  >
                    <X className="w-2 h-2" />
                  </Button>
                </div>
              ))}
              <Button
                variant="ghost"
                size="sm"
                className="h-8 w-8 p-0 ml-2"
                onClick={() => createNewFile()}
              >
                <Plus className="w-3 h-3" />
              </Button>
            </div>
          </div>

          {/* Editor */}
          <div className="flex-1 relative">
            {activeFile ? (
              <ScrollArea className="h-full custom-scrollbar editor-scrollbar">
                <Textarea
                  value={activeFile.content}
                  onChange={(e) => updateFileContent(activeFile.id, e.target.value)}
                  onSelect={(e) => {
                    const target = e.target as HTMLTextAreaElement;
                    const selected = target.value.substring(target.selectionStart, target.selectionEnd);
                    setSelectedCode(selected);
                  }}
                  className="min-h-full resize-none border-none focus:ring-0 font-mono text-sm custom-scrollbar"
                  placeholder="Start coding..."
                />
              </ScrollArea>
            ) : (
              <div className="flex items-center justify-center h-full text-muted-foreground">
                <div className="text-center">
                  <Code className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>No file open</p>
                  <Button variant="outline" onClick={() => createNewFile()} className="mt-2">
                    Create New File
                  </Button>
                </div>
              </div>
            )}
          </div>

          {/* Terminal */}
          {isTerminalExpanded && (
            <div className="h-64 border-t bg-gray-900 text-gray-100 flex flex-col">
              <div className="h-8 bg-gray-800 border-b border-gray-700 flex items-center justify-between px-3">
                <div className="flex items-center gap-2">
                  <TerminalIcon className="w-4 h-4" />
                  <span className="text-sm">Terminal</span>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsTerminalExpanded(false)}
                  className="h-6 w-6 p-0 text-gray-400 hover:text-white"
                >
                  <Minimize2 className="w-3 h-3" />
                </Button>
              </div>
              
              <ScrollArea className="flex-1 p-2 custom-scrollbar terminal-scrollbar" ref={terminalScrollRef}>
                <div className="space-y-1 font-mono text-sm">
                  {terminalLines.map(line => (
                    <div
                      key={line.id}
                      className={
                        line.type === 'input' ? 'text-blue-400' :
                        line.type === 'error' ? 'text-red-400' : 'text-gray-300'
                      }
                    >
                      {line.content}
                    </div>
                  ))}
                  <div className="flex items-center gap-2">
                    <span className="text-blue-400">$</span>
                    <Input
                      value={terminalInput}
                      onChange={(e) => setTerminalInput(e.target.value)}
                      onKeyDown={(e) => e.key === 'Enter' && executeTerminalCommand()}
                      className="flex-1 bg-transparent border-none text-white focus:ring-0 p-0 h-auto"
                      placeholder="Type command..."
                    />
                  </div>
                </div>
              </ScrollArea>
            </div>
          )}
        </div>

        {/* Right Sidebar */}
        <EnhancedRightSidebar
          activePanel={activeRightPanel}
          setActivePanel={setActiveRightPanel}
          isExpanded={rightSidebarExpanded}
          setIsExpanded={setRightSidebarExpanded}
          activeFile={activeFile}
          selectedCode={selectedCode}
          onCodeGenerated={(code) => {
            if (activeFileId && activeFile) {
              const newContent = selectedCode 
                ? activeFile.content.replace(selectedCode, code)
                : activeFile.content + '\\n\\n' + code;
              updateFileContent(activeFileId, newContent);
            }
          }}
        />
      </div>

      {/* Command Palette */}
      {showCommandPalette && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-background border rounded-lg shadow-lg w-96 max-h-96">
            <div className="p-4 border-b">
              <Input
                placeholder="Search commands..."
                value={commandSearch}
                onChange={(e) => setCommandSearch(e.target.value)}
                autoFocus
              />
            </div>
            <ScrollArea className="max-h-64">
              <div className="p-2">
                {filteredCommands.map(command => (
                  <div
                    key={command.id}
                    className="flex items-center justify-between p-2 rounded cursor-pointer hover:bg-muted/50"
                    onClick={() => {
                      command.action();
                      setShowCommandPalette(false);
                      setCommandSearch('');
                    }}
                  >
                    <span className="text-sm">{command.label}</span>
                    {command.shortcut && (
                      <Badge variant="outline" className="text-xs">
                        {command.shortcut}
                      </Badge>
                    )}
                  </div>
                ))}
              </div>
            </ScrollArea>
          </div>
        </div>
      )}

      {/* Status Bar */}
      <div className="h-6 bg-blue-600 dark:bg-blue-700 text-white flex items-center justify-between px-4 text-xs font-mono">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-1">
            <GitBranch className="w-3 h-3" />
            <span>{statusBarData.gitBranch}</span>
          </div>
          <div className="flex items-center gap-1">
            <CheckCircle className="w-3 h-3" />
            <span>No problems</span>
          </div>
          <div className="flex items-center gap-1">
            <Code className="w-3 h-3" />
            <span>{statusBarData.language.toUpperCase()}</span>
          </div>
          <span>{statusBarData.encoding}</span>
        </div>
        <div className="flex items-center gap-4">
          <span>{statusBarData.cursorPosition}</span>
          {statusBarData.selection && <span>{statusBarData.selection}</span>}
          <div className="flex items-center gap-1">
            <Brain className="w-3 h-3" />
            <span>AI {statusBarData.aiStatus}</span>
          </div>
          <div className="flex items-center gap-1">
            <Activity className="w-3 h-3" />
            <span>{statusBarData.environmentStatus}</span>
          </div>
          <div className="flex items-center gap-1">
            <Cpu className="w-3 h-3" />
            <span>CroweOS Pro</span>
          </div>
        </div>
      </div>
    </div>
  );
}
